package phic;

import phic.common.*;
import phic.drug.Drug;

/**
 * Heart organ. Responsible for determininng stroke volume, heart rate, and
 *  Right atrial pressure.
 */
public final class Heart
    extends PerfusedOrgan {
  public Heart(){resetCompliances();}
  /**
   * Stroke volume is goverened by Starling's law of the heart,
   * proportional to right atrial pressure.
   * @see #RAP
   */
  public VDouble SV=new VDouble();

  /**
   * Heart rate is determined by sympathetic activity and mean arterial
   * pressure (APL).
   * @see phic.CVS#AP
   */
  public VDouble rate = new VDouble();

  /**
   * Right atrial pressure (RAP) is determined by sympathetic activity,
   * and blood volume.
   * @see phic.Brain#Symp
   * @see phic.Blood#volume
   * 1.6.06 migrated to heart.right.atrialP for chambers design
   */
  //public VDouble RAP=new VDouble();

  /**
   * Cardiac output = stroke volume * heart rate
   */
  public VDoubleReadOnly CO = new VDoubleReadOnly() {
    public double get(){ return SV.get() * rate.get(); }
  };



  /**
   * Each cycle, the heart evaluates the stroke-volume, heart rate and
   * calls the calculateP() and calculateCapillaries() methods of the current
   * cardiovascular system to calculate the arterial pressure.
   */
  public void tick() {
    calculatePerfusion();
    calculateValves();
    calculateSV();
    calculateHR();
//		body.CVS.calculateP(); //CVS has now become an Organ
//    body.CVS.calculateCapillaries();
    if (body.getClock().isSlowMode) {
      calculatePhase();
    }
    calculateRemodelling();
    waitMinutes(1);
  }

  /** This is the point at which the starling curve peaks, in mHg RAP */
  //public double starlingCurvePeakRAP = 0.009;

  /** This is the peak stroke volume, in L */
  //public double peakContractility = 0.138;

  /** Minimum RAP to attain a zero stroke volume, in mHg */
  //private final double minimumRAP = 0.00143;

  /** the phase of the cycle  of the heart, from 0 to 1 */
  public double phase = 0;
  public VDouble ventricularForceDifference=new VDouble();

  /**
   * Calculate stroke volume.
   * Right atrial pressure depends on blood volume and sympathetic activation.
   * Then use Starling's curve to find stroke volume.
   * 30/6/3 uprightness adds on 33% of the normal RAP.
   *
   * 5/6/6  restructured left-right interdependence: each ventricle has its
   *        own expected stroke volume. The atrial pressures depend both on
   *        the negative pressure generated by the ventricle, but also on
   *        accumulation of blood behind, due to the other ventricle's pumping.
   *        The actual stroke volume is calculated as the average of the
   *        left and right.
   */
  void calculateSV() {
    double symp = body.brain.Symp.getError();

    /**
     * Left sisded expected stroke volume, as calculated using the starling curve
     * LV fails if systolic pressures > 220
     * AR & MR decrease LVSV by a fraction
     */
    lvsv = Math.max(0.005,
        left.starling.getValue(left.diaV.get())
        + 0.015 * symp +
        body.blood.getDrugBinding(Drug.BETA_ADRENOCEPTOR)
        + 0.150 * Math.min(body.blood.pH.get() - 6.9, 0)
        - 1.5 * Math.max(left.sysP.get() - 0.210, 0)
      ) * (1-0.5*(aorticRegurg.get() + mitralRegurg.get()));
    /**
     * Right sided expected stroke volume, as calculated using the starling curve
     * Acidosis has less effect on RV.
     * RV fails if pressures > 90 systolic
     */
    rvsv = Math.max(0.005,
        right.starling.getValue(right.diaV.get())
        + 0.015 * symp +
        body.blood.getDrugBinding(Drug.BETA_ADRENOCEPTOR)
        + 0.120 * Math.min(body.blood.pH.get() - 7.0, 0)
        - 1.4 * Math.max(right.sysP.get() - 0.040, 0)
        //-0.001 * (Math.exp((body.CVS.SysPAP.get()-0.070)*170))
        //-0.001 * (exp((CVS.SysPAP-0.080)*300))
      );


    double bvError = Math.max(body.blood.volume.getError(), -3);
    double ventForceDiff = ventricularForceDifference.get();
    double rap = (/*right.atrialP.initialValue + */venousCompliance.getInverse(bvError))
        * (1.5 - environment.Uprt.get() * 0.5)
        * (1+symp*0.5)
        + body.lungs.ITP.getError() * 0.01
        + body.blood.getDrugBinding(Drug.VENOUS_SMOOTH_MUSCLE) * 500
//        + 0* accumulationConstant * lvsv
//        - 0* right.diaCompliance.getInverse( rvsv )
        + //accumulationConstant * (lvsv-rvsv)
        -ventForceDiff
        + 0.1 * Math.max(0,pericVol.getError()) // 10 ml gives 1 mmHg rise in atrial pressure
        ;

    /**
     * pulmonary venous pressure not affected so much by intrathoracic pressure
     * because of direct pressure transmission. This gives rise to the
     * respiratory alternation in ventricular dominance
     */
/*if(lvsv<0){
      System.out.println("lvedv="+left.diaV.get());
}*/

    double lap = (/*left.atrialP.initialValue + */
         venousCompliance.getInverse(bvError))
       * (1.5 - environment.Uprt.get() * 0.5)
       * (1+symp*0.5)
       + body.lungs.ITP.getError() * 0.005
       + body.blood.getDrugBinding(Drug.VENOUS_SMOOTH_MUSCLE) * 500
//       + 0* accumulationConstant * rvsv
//       - 0.0* left.suctionPressure();
       + // accumulationConstant * (rvsv-lvsv)
       ventForceDiff
       + 0.100 * Math.max(0,pericVol.getError()) // 10 ml extra gives 1 mmHg rise in atrial pressure
       + 0.010 * mitralRegurg.get()
       ;

/*if(lap<0){
  System.out.println("rvsv="+rvsv+", lvdp"+left.diaCompliance.getInverse( lvsv ));
}*/

   /** Actual stroke volume is compromise between ventricles */
   double sv = Math.max((lvsv + rvsv) / 2,0);
   ventricularForceDifference.lowPass(accumulationConstant * (rvsv-lvsv) - 0.1*ventForceDiff, fractionDecayPerMinute(0.05));

    /**
     * original was 0.00167 * Math.max( body.blood.volume.get() - 2 + symp ,0 );
     *   Uprightness model 1 : additive effect of uprightness
     * RAP = 0.00167 * Math.max(body.blood.volume.get() - 2, 0) + (1 - environment.Uprt.get()) * 0.00167;
     *   Uprightness model 2 : multiplicative effect
     * 18.8.5 added sympathetics back in
     */
    /*
    double rap= (right.atrialP.initialValue
                 + venousCompliance * Math.max(body.blood.volume.getError(), -3)
                )* (1.5 - environment.Uprt.get() * 0.5)
                + body.lungs.ITP.getError() * 0.01
                + body.blood.getDrugBinding(Drug.VENOUS_SMOOTH_MUSCLE) * 0.1
                //+ symp * 0.1
                ;
     */
    //right.atrialP.set(rap);
    right.atrialP.lowPass(Math.max(0,rap), fractionDecayPerMinute(0.4));
    /**
     * Left atrial pressure depends on blood volume, uprightness,
     * intrathoracic pressure, and venodilators.
     */
    /*
    double lap = (left.atrialP.initialValue
                 + venousCompliance * Math.max(body.blood.volume.getError(), -3)
                ) * (1.5 - environment.Uprt.get() * 0.5)
                + body.lungs.ITP.getError() * 0.01
                + body.blood.getDrugBinding(Drug.VENOUS_SMOOTH_MUSCLE) * 0.1
                ;
     */
    left.atrialP.lowPass(Math.max(0,lap), fractionDecayPerMinute(0.4));
    /**
     * Starling's law of the heart: output proportional to filling pressure
     * up to 9mmHg, then flat to 11mmHg, then falls.
     * old version: was 0.025 + 10 * RAP + 5E-3 * symp
     * 16/6/3 decided it was too lenient: a small drop in RAP gives large drop in SV
     * 27/10/3 added effect of acidosis on contractility: drop below 7 of 0.1 gives 15ml reduction
     * 28/11/3 now the curve's peak contractility and the RAP at which this
     * pressure is attained are variables, depending on the patient's heart
     * @todo use a Curve?
     */
    /*
    if (rap < starlingCurvePeakRAP) {
      sv=( Math.max(0,
                    (rap - minimumRAP) / (starlingCurvePeakRAP - minimumRAP) *
                    peakContractility
           ) );
    }
    else {
      sv=(  Math.max(0, peakContractility - 30 * (rap - starlingCurvePeakRAP)) );
    }
    sv=sv
        + 0.0006 * symp +
        body.blood.getDrugBinding(Drug.BETA_ADRENOCEPTOR)
        + 0.150 * Math.min(body.blood.pH.get() - 7.0, 0)
        ;
     */
    SV.set(sv);
    /** Calculate left heart volumes & pressures */
    left.setStrokeVolume(sv);
    left.sysP.set(
        body.CVS.SysBP.get() * (1 + 1.5*aorticStenosis.get() )
        );
    left.setMeanP(body.CVS.AP.get());
    left.tick();
    /** Calculate right heart volumes & pressures */
    right.setStrokeVolume(sv);
    right.sysP.set(body.CVS.SysPAP.get());
    right.setMeanP(body.CVS.MPAP.get());
    right.tick();
  }

  /**
   * This is the coefficient that determines the change in atrial pressure for
   * a given change in blood volume. measured in mHg / L
   */
  //public double venousCompliance = 1 / 0.00167;

  public Curve.TwoGradients venousCompliance = new Curve.TwoGradients();
  /**
   * The ratio between the left ventricular stroke volume and right atrial
   * pressure, in mHg / L
   */
  public double accumulationConstant = 1.0;


  /**
   * @todo make private - or rather, local to the SV method.
   */
  public double lvsv, rvsv;

  public VDoubleReadOnly CI= new VDoubleReadOnly() {
    public double get() {      return CO.get() / body.skin.area.get();    }
  };

  /**
   * Heart rate depends strongly on arterial pressure (baroreflex), and on
   * sympathetics. It is limited to range 30 - 200.
   * @todo implement Bainbridge effect (RAP -> HR) and Temperature direct effect on pacemaker
   */
  void calculateHR() {
    //was 72 - 9000 * body.CVS.APL.getError() + 300 * body.brain.Symp;
    //now to 100*symp (12/6/3)
    // perhaps symp should contribute less?
//!   16/6/05 migrated to Controllers
//!    double hr = 72 - 3000 * body.CVS.APL.getError() + 300 * body.brain.Symp.get() +
//!        9000 * body.blood.getDrugBinding(Drug.BETA_ADRENOCEPTOR);
//!    rate.lowPass(Math.max(Math.min(hr, 200), 40), fractionDecayPerMinute(0.8));
//!!    double betaAR=body.blood.getDrugBinding(Drug.BETA_ADRENOCEPTOR);
//!!    if(betaAR>0)
//!!      rate.lowPass( Math.max( Math.min( rate.get() + 9000 * betaAR, 200 ), 40), 0.3 );	//added by me
    double r = rate.get();
    left.setRate(r);
    right.setRate(r);
  }

  public void reset() {
    super.reset();
    phase=0;
    resetCompliances();
    left.reset();right.reset();
    lvsv=rvsv=SV.initialValue;
    ventricularForceDifference.set(0);
    O2supply=0.039;
  }
  /**
   * Resets the values of the left and right chambers' diastolic compliance
   * curve, starling curves, ventricular filling curves,
   * and the venous compliance curve
   * @todo move these to Variables.txt
   */
  public void resetCompliances(){
    /** Venous pressures determined by blood volume. */
    venousCompliance.splitX = 0.0055; // mHg CVP
    venousCompliance.splitY = 0.300; // Litres above normal blood volume
    // Litres per change CVP mHg
    venousCompliance.lowerGradient = 600; // BV = 2 L gives CVP 0.
    venousCompliance.higherGradient = 77; // BV = 6.0 gives CVP 12 (i.e. 6.5 mmHg per half-litre)
    venousCompliance.isSmooth=false;

    /** Diastolic volumes controlled by venous filling pressure */

    right.diaCompliance.higherGradient = 17; // 5 mmHg gives 85 ml; 12 mmHg gives 204 ml
    right.diaCompliance.splitY = 0.008;      // residual volume with no filling pressure
    right.diaCompliance.splitX = 0.001;      // pressure needed to start filling
    right.diaCompliance.lowerGradient = 1;   // pretty flat unles pressure enough
    right.diaCompliance.isSmooth = false;

    left.diaCompliance.higherGradient = 17;  // 5 mmHg gives 85 ml; 12 mmHg gives 204 ml
    left.diaCompliance.splitY = 0.008;       // residual volume with no filling pressure
    left.diaCompliance.splitX = 0.001;       // pressure needed to start filling
    left.diaCompliance.lowerGradient = 1;    // pretty flat unless pressure enough
    left.diaCompliance.isSmooth = false;


    /** Starling curves */
    left.starling.maximalSV = 0.138;
    left.starling.optimumEDV = 0.154;
    left.starling.minimumEDV = 0.015;

    right.starling.maximalSV = 0.138;
    right.starling.optimumEDV = 0.154;
    right.starling.minimumEDV = 0.015;

    left.fillingCurve.decayConstant=5;
    left.fillingCurve.maximalValue=1;
    right.fillingCurve.decayConstant=5;
    right.fillingCurve.maximalValue=1;

  }

  /**
   * Volume of pericardial effusion: this directly controls the maximum value
   * of the left and right ventricle diastolic filling curves. A value of 5 ml
   * gives a value of 100%, and a value of 95 ml gives a value of 10%
   *
   * ?should this affect the diastolic compliance curve instead?
   */
  public VDouble pericVol = new VDouble()
  /*{ //moved to calculateValues()
    public double get(){return (1.05-left.fillingCurve.maximalValue) * 0.1; }
    public void set(double v){
      left.fillingCurve.maximalValue = right.fillingCurve.maximalValue = Math.max(0,Math.min(1, 1.05-v*10));
      left.diaCompliance.gradient = right.diaCompliance.gradient = 17.5 - pericVol.get()*300;
    }
  }*/;

  /**
   * Oxygen supply and demand of the heart, in L per minute.
   */
  public double O2supply;
  public VDouble VO2=new VDouble();

  /** Phase of heart's cycle */
  void calculatePhase() {
    phase += elapsedTime / 60 * rate.get();
    if(phase>=1){
      phase -= (int) phase;
      isEctopic = Math.random()<pVE;
    }
  }

  /**
   * Fraction of normal valve area that is stenosed. Value of 0 is normal,
   * Value of 1 is a valve with no aperture.
   */
  public VDouble mitralStenosis = new VDouble();
  public VDouble aorticStenosis = new VDouble();
  public VDouble aorticRegurg   = new VDouble();
  public VDouble mitralRegurg   = new VDouble();

  /**
   * Converts the physical valve attributes into the filling and compliance
   * curves of the heart.
   * The AV valve areas determine the filling rate of the ventricles
   * The percardial fluid volume determines the maximum volume of the ventricles
   * and also decreases the effective ventricular diastolic compliance.
   */
  public void calculateValves(){
    left.fillingCurve.decayConstant = 5 * (1 - mitralStenosis.get())
                                        * (1 + 0.3*aorticRegurg.get());
    double peri = pericVol.get();
    left.fillingCurve.maximalValue = right.fillingCurve.maximalValue =
        Math.max(0.10,Math.min(1, 1.15-peri*10));
    left.diaCompliance.higherGradient = right.diaCompliance.higherGradient = 21 - Math.max(peri-0.010,0)*300;
    left.extraFillingPressure = aorticRegurg.get() * 0.010;
  }


  /**
   * normal heart flow 225ml/min
   * Assume at normal state, heart uses 30% of delivered O2.
   * @todo This should be more like 80%
   */
  void calculatePerfusion() {
    O2supply = flow.get() * body.blood.arterial.O2.get() * 72/rate.get() * 72/rate.get();
    double vo2=CO.get() * (body.CVS.AP.get()-right.atrialP.get())  // power used in pumping if 100% efficient
        * 0.09 * 0.30;
    VO2.set ( vo2 );
    if(O2supply-vo2>0.050) /** @todo Implement heart attack here */;
  }

  /** Amount of cardiac ischaemia, in litres of O2 per minute. */
  public double ischaemia(){ return Math.max(0, VO2.get()-O2supply); }

  /**
   * the probability of a ventricular ectopic beat.
   */
  public double pVE = 0;
  /**
   * Whether the current beat is an ectopic - only used in slow mode.
   */
  public boolean isEctopic;
  /**
   * Determines whether the current beat is an ectopic or not
   */
  public boolean isEctopicBeat(){
    if(body.getClock().isSlowMode) return isEctopic;
    return Math.random()<pVE;
  }

  /**
   * Power output of left heart, as calculated by resistance * flow ^ 2,
   * in Watts
   */
  /*
  public double LVPower(){
    double co = CO.get();
    return co*co*body.CVS.PR.get();
  }
*/
  /**
   * Power output of right heart, as calculated by resistance * flow ^ 2,
   * in Watts
   */
  /*
  public double RVPower(){
    double co=CO.get();
    return co*co*body.CVS.PVR.get();
  }
  */
  public Chamber left = new Chamber();
  public Chamber right = new Chamber();
  public VDouble LVH = new VDouble();

  /**
   * The remodelling that takes place over several weeks in response to
   * increased work (calculated from systolic pressure and stroke volume.
   */
  public void calculateRemodelling(){
    LVH.lowPass( (left.sysP.get() * lvsv), 2E-6  );
  }


}
