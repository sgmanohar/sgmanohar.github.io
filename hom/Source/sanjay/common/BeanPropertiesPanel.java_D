
/**
 * BeanProperties
 */
package sanjay.common;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.beans.*;

public class BeanPropertiesPanel extends JPanel {
  BorderLayout borderLayout1 = new BorderLayout();
  JScrollPane jScrollPane1 = new JScrollPane();
  JTable table = new JTable();
  BeanTableModel tablemodel = new BeanTableModel();
	TableCellEditor editor = new BeanTableCellEditor();

	protected Object bean;
	public void setBean(Object b){
		bean=b;
		initialise();
		table.setCellEditor(editor);
	}
	public Object getBean(){return bean;}


  public BeanPropertiesPanel() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    this.setLayout(borderLayout1);
    table.setModel(tablemodel);
    this.add(jScrollPane1, BorderLayout.CENTER);
    jScrollPane1.getViewport().add(table, null);
  }

	PropertyDescriptor[] props;
	protected void initialise(){
		try{
			BeanInfo info=Introspector.getBeanInfo(bean.getClass());
			props = info.getPropertyDescriptors();
		}catch(IntrospectionException e){
			e.printStackTrace();
		}
	}

	protected class BeanTableModel extends AbstractTableModel{
		public int getColumnCount(){return 2;}
		public int getRowCount(){return props.length;}
		public Object getValueAt(int r,int c){
			if(c==0){
				return props[r].getName();
			}else{
				Object value;
				try{
					value=props[r].getReadMethod().invoke(bean, new Object[]{} );
				}catch(Exception e){
					value=null; e.printStackTrace();
				}
				return value;
			}
		}
		public void setValueAt(Object value, int r, int c){
			if(c==1){
				try{
					props[r].getWriteMethod().invoke(bean, new Object[]{value} );
				}catch(Exception e){
					e.printStackTrace();
				}
			}
		}
		public boolean isCellEditable(int r, int c){return c==1;}
		public String getColumnName(int c){
			if(c==0)return "Property";
			else if(c==1)return "Value";
			else return null;
		}
	}
	protected class BeanTableCellEditor extends DefaultCellEditor{
		PropertyEditor currentEditor;
		JComponent currentComponent;
		public Component getTableCellEditorComponent(JTable table, Object value, boolean selected,int r,int c){
			PropertyEditor e = props[r].getPropertyEditorClass().newInstance();
			currentEditor=e;
			e.setValue(value);
			if(e.isPaintable()){
				currentComponent= new PaintingEditor(e);
			}else if(e.getTags()!=null){
				currentComponent= new JComboBox();
			}else{

			}
			return e.getCustomEditor();
		}
	}
}