package phic;

import phic.common.PerfusedOrgan;
import phic.common.VDouble;
import phic.common.VDoubleReadOnly;
import phic.common.Quantity;
import phic.drug.Drug;
import evaluator.MathExtra;
import phic.common.UnitConstants;

/**
 * Perfused organ which consumes oxygen and glucose, and produces carbon
 * dioxide. The rate of these processes depends on exercise, as given by
 * Environment.Exer.
 * The muscle is inefficient and generates body heat.
 * The muscle can build up an oxygen debt if perfusion is inadequate.
 *
 * @see phic.Environment#Exer
 */
public class Muscle
    extends PerfusedOrgan {
  /**
   * The efficiency of the muscle is 24.3% - this is a private constant.
   * @todo but may be made a public variable.
   */
  public double EFFICIENCY = 0.243;

  /**
   * Total energy in calories used by the muscle in one minute.
   * It is calculated using the method totalCaloriesPerMinute, and depends
   * on the exercise rate {@link phic.Environment#Exer Environment.Exer}
   * (which is the useful work done) and on the efficiency of the muscle.
   *
   * The difference between Muscle.Cal and Environment.Exer is the
   * wasted heat generated by muscle.
   */
  public VDouble Cal= new VDouble();

  /**
   * The oxygen requrement of the muscle for burning energy at the
   * required rate, in L/min
   */
  public VDouble O2Req = new VDouble();

  /**
   * The oxygen that is being taken up by the muscle, which depends upon
   * adequate blood supply @see #flow() and the oxygen debt @see #O2Debt.
   * Measured in L/min.
   */
  public VDouble O2Use= new VDouble();

  /**
   * The current oxygen debt, i.e. how much anaerobic respiration has
   * taken place without the O2 being replaced. Measured in Litres.
   */
  public VDouble O2Debt = new VDouble();

  /**
   * The muscle
   * <BR>  1) regulates the vessels @see #regulateVessels()
   * <BR>  2) consumes energy @see #consumeEnergy()
   * <BR>  3) calculates blood gases @see #changeBlood()
   */
  public void tick() {
    regulateVessels();
    consumeOxygen();
    changeBlood();
    waitMinutes(1);
  }

  public double maximumO2Extraction=0.8;
  /**
   * Work out calories per minute, and oxygen use.
   * Then find the new O2 debt.
   * @todo implement change to anaerobic respiration when O2 is short (and
   * increase in RQ?)
   */
  public void consumeOxygen() {
    Cal.set( totalCalsPerMinute() );
    //each Calorie uses 0.18ml O2
    O2Req.set( 18E-5 * Cal.get() );
    //calculate maximum oxygen supplied by blood in the elapsed time
    double f = flow.get() * elapsedTime / 60;
    double supply = f * Math.max(body.blood.arterial.O2.get() - 0.08, 0);
    //calculate total oxygen requirement
    double oxygenConsumption = O2Req.get() * elapsedTime / 60;
    double need = oxygenConsumption + O2Debt.get();
    //oxygen usage from blood is the lower of these two
    double oxygenUptake = Math.min( maximumO2Extraction * supply,  need );
    this.O2Use.set( oxygenUptake / (elapsedTime / 60) );
    //calculate new oxygen debt - difference between supply and demand
    O2Debt.add( oxygenConsumption - oxygenUptake );
    if(verbose)inform("used "+Quantity.toString(O2Use.get())+" O2"+", need "+Quantity.toString(O2Debt.get()));
    //anaerobic metabolism: 6 mol O2 for 1 mol glucose; equiv 2 mol lactate
    double lacprod = (oxygenConsumption - oxygenUptake) * 22.4 / 3;
    body.blood.lactate.addQ(lacprod);
    //body.blood.H.addQ(lacprod);
  }

  /** Returns the resultant venous CO2 concentration of muscle */
  public VDoubleReadOnly CO2 = new VDoubleReadOnly() {
    public double get(){
      return body.blood.arterial.CO2.get() + O2Req.get() * body.RQ.get() / flow.get();
    }
  };

  /**
   * Resistance decreases proportional to oxygen debt, decreased by beta
   * adrenoceptors, but increased by vasoconstrictor tone.
   */
  public void regulateVessels() {
    double c=Cal.get();
    double vcterr=body.CVS.VCT.getError();
    double beta = body.blood.getDrugBinding(Drug.BETA_ADRENOCEPTOR) + body.brain.Symp.getError()/10;
    //resistance.lowPassQuantity(Math.max( (1+(vct-1)*15) * res, 0.004), fractionDecayPerMinute(0.2));
    //31.7.5 initialValue - 0.06 * O2Debt.getError() + 0.1 * (vct-1)
    //18.4.6 initialValue - 0.06 * O2Debt.getError() + Math.max(0,6 * (vct-1));
    //26.7.7 added mucal plus sigmoid function of O2 debt
    double target = resistance.initialValue
                  - 0.3 * MathExtra.sigmoid( O2Debt.getError()/0.300 )
                  + Math.max(0,6 * vcterr)
                  - c * 30E-6
                  - 0.05 * beta;
    resistance.lowPassQuantity(target, fractionDecayPerMinute(0.8) );
  }

  /**
   * Calculate the venous blood gas composition from arterial blood gases
   * and the oxygen use and carbon dioxide production rate.
   * Takes into account the carbon dioxide formed from H2CO3.
   * @todo This will eventually move out of here! ? to Blood or to Body
   */
  public void changeBlood() {
    double totalO2Use = body.NMO2Use.get() + O2Use.get();
    body.O2Use.lowPass(totalO2Use, fractionDecayPerMinute(0.2));
    Blood b = body.blood;
      /**
       *   set concentrations. was in 'oxin'
       *   Uses Fick's law to calculate venous concentrations of gas.
       */
			b.venous.O2.set(b.arterial.O2.get()-
				body.O2Use.get()/body.CVS.heart.CO.get());
			b.venous.CO2.set(b.arterial.CO2.get()+
				(b.CarbonicProduction.get()) // rate of H2CO3 generation
				+(body.CO2Production.get())
				/body.CVS.heart.CO.get()); //flow per minute
  }

  /**
   * Calories = muscle heat + exercise (assumed 24.3% efficient)
   */
  double totalCalsPerMinute() {
    return environment.Exer.get() * 0.2389 / EFFICIENCY;
  }

  /**
   * The amount of heat wasted. This method is not currently used.
   * @todo make public? or remove.
   */
  double heatCalsPerMinute() {
    return environment.Exer.get() * 0.2389 * (1 / EFFICIENCY - 1);
  }
}
